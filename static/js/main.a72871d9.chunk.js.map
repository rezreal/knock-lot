{"version":3,"sources":["knockRodProtocol.ts","knockRod.ts","interpol.ts","XToysClient.ts","App.tsx","index.tsx"],"names":["STAT","DSSE","CTLF","DSS1","DSS2","FunctionCode","enumBitSetFromNumber","bitset","allValues","flags","Set","Object","keys","forEach","v","vNum","Number","isNaN","add","numberFromEnumBitSet","values","i","queryStatusRegisters","queryHoldingRegisters","parseQueryStatusRegisterResponse","response","responseData","parseQueryHoldingRegistersResponse","view","DataView","pnow","getInt32","almc","getInt16","dipm","dipo","dss1","getUint16","dss2","dsse","stat","getUint32","buildResetAlarm","reset","forceSingleCoil","setSafetySpeedEnabled","enabled","resetAlarm","pioModbusOnCommand","servoOnCommand","on","buildHomeReturn","ret","buffer","ArrayBuffer","writeHeader","ForceSingleCoil","d1","setUint16","crc16modbus","Buffer","from","homeReturn","numericalValueMovementCommand","targetPosition","targetPositionBand","velocity","acceleration","pushCurrentLimitingValue","controlFlags","PresetMultipleRegisters","setUint8","setInt32","setUint32","address","data","functionCode","setInt8","registers","ReadHoldingRegisters","crcCheck","numberOfDataBytes","getUint8","slice","length","Error","dataView","expectedCrc","presentedCrc","ShockRodSize","clamp","a","min","max","Math","range","x1","y1","x2","y2","x","y","lerp","invlerp","KnockRod","port","size","_state","undefined","oscillator","speed","out","active","oscillatorTimer","onOscillate","console","info","effectiveSpeed","duration","window","clearTimeout","setTimeout","bind","moveTo","trace","time","performance","now","pos","dest","writer","reader","timer","TaskTimer","mutex","Mutex","lower","upper","alreadyActive","this","speedChange","updater","oldState","deviceStatusRegister1","deviceStatusRegister2","expansionDeviceStatus","systemStatusRegister","currentPosition","input","dispatchEvent","CustomEvent","detail","state","withTimeout","acquire","release","writeBytes","readBytes","byteLength","toHex","wait","Task","id","totalRuns","removeOnCompleted","callback","queryAwaitResponseWithRetry","Promise","resolve","targetPosRel","currentPos","getEstimatedPosition","targetPos","distance","abs","clampedSpeed","clampedTargetPos","runExclusive","distanceToDest","durationToDest","targetTime","silentInterval","waitUntil","has","HEND","type","listener","options","open","SERIAL_OPTIONS","writable","getWriter","readable","getReader","setServo","queryStatusRegister","tickInterval","_task","catch","e","log","home","start","r","then","updateState","old","query","responseSize","responseExtractor","retryCount","retryInterval","actualRetryCount","actualRetryInterval","actualReadTimeout","releaser","any","readResponse","extracted","expectedBytes","reads","read","res","done","value","push","joinArr","cmd","uint8Array","Uint8Array","write","ms","test","periodMs","until","Date","getTime","totalLength","Int8Array","reduce","akk","nxt","resArray","array","set","buf","map","toString","padStart","join","toUpperCase","DocumentFragment","baudRate","dataBits","stopBits","parity","XToysClient","config","onCommand","ws","evt","send","JSON","stringify","removeEventListener","close","t","WebSocket","websocket","token","onopen","connected","reject","addEventListener","once","parse","success","m","parsed","getSessionStorageOrDefault","key","defaultValue","stored","localStorage","getItem","App","_props","useState","serialDevice","xtoys","setConfig","params","_setParams","latestParams","useRef","setParams","p","current","rodConnecting","setRodConnecting","useEffect","setItem","mm","EightInch","setSize","setState","rod","xToys","setXToys","navigator","serial","getPorts","ports","abort","cancel","forget","requestPort","filters","getInfo","usbVendorId","usbProductId","c","init","mode","moveToWithin","position","oscillate","className","disabled","onChange","target","onClick","connectXToys","stop","RMDS","PMSS","checked","SFTY","setSafetySpeed","PWR","EMGS","PSFL","SV","ALMH","MOVE","PUSH","PEND","Intl","NumberFormat","maximumFractionDigits","format","parseInt","step","renderAcceleration","TwelveInch","moveSimple","href","container","document","getElementById","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.a72871d9.chunk.js","sourcesContent":["/** Bit-set of the STAT system status registers (Address = 0x9008) **/\r\nimport {crc16modbus} from \"crc\";\r\n\r\nexport enum STAT {\r\n    /**\r\n     * Drive source ON\r\n     * 0: Drive source cut off\r\n     * 1: Normal\r\n     * This bit will turn 0 when the motor drive-source cutoff terminal is released.\r\n     */\r\n    MPOW = 1 << 0,\r\n\r\n    /**\r\n     * Servo command status\r\n     * 0: Servo OFF\r\n     * 1: Servo ON\r\n     * This bit indicates the servo ON/OFF command status.\r\n     * This bit will turn 1 when the following conditions are met:\r\n     * • The EMG status bit in device status register 1 is 0.\r\n     * • The major failure status bit in device status register 1 is 0.\r\n     * • The enable status bit in device status register 2 is 1.\r\n     * • The auto servo OFF status in the system status register is 0.\r\n     */\r\n    SON = 1 << 1,\r\n\r\n    /** Servo status\r\n     * 0: Servo OFF\r\n     * 1: Servo ON\r\n     * The servo ON status is indicated. After a servo ON command is issued, this bit will remain 0 until the servo ON delay time set by a parameter elapses.\r\n     * If the servo cannot be turned ON for some reason even after a servo ON command is received, this bit will remain 0.\r\n     * The RC controller does not accept any movement command while this bit is 0.\r\n     *\r\n     * */\r\n    SV = 1 << 2,\r\n\r\n    /**\r\n     * Home return completion status.\r\n     * 0: Home return not yet complete\r\n     * 1: Home return completion\r\n     * This bit will become 1 when home return is completed. In case the\r\n     * absolute specification is set, the bit is set to 1 from the startup if absolute\r\n     * reset has been completed.\r\n     * If a movement command is issued while this bit is 0, an alarm will\r\n     * generate.\r\n     */\r\n    HEND = 1 << 3,\r\n\r\n    /**\r\n     * Operation mode status\r\n     * 0: AUTO mode\r\n     * 1: MANU mode\r\n     * This bit becomes 1 when the RC controller is in the MANU mode.\r\n     * Note that the controller is always in the MANU mode in cases of models\r\n     * not equipped with an operation mode switch (ERC2, PCON-SE/CY and\r\n     * ACON-SE/CY).\r\n     */\r\n    RMDS = 1 << 4\r\n\r\n}\r\n\r\n/** Bit-set of the DSSE expansion device status register (Address = 0x9007) */\r\nexport enum DSSE {\r\n    /**\r\n     * Moving signal\r\n     * 0: Stopped\r\n     * 1: Moving\r\n     * This bit indicates whether or not the actuator is moving (conditions during\r\n     * home return and push-motion operation included). This bit remains 0 while\r\n     * the actuator is paused.\r\n     */\r\n    MOVE = 1 << 5,\r\n    /**\r\n     * PIO/Modbus switching status\r\n     * 0: PIO commands enabled\r\n     * 1: PIO command disabled\r\n     */\r\n    PMSS = 1 << 8,\r\n    /**\r\n     * Excitation detection status\r\n     * 0: Excitation detection not yet complete\r\n     * 1: Excitation detection complete\r\n     * PCON/ERC2, ERC3 Series controllers perform excitation detection at the\r\n     * first servo ON command received after the controller has started. This bit\r\n     * becomes 1 when excitation detection is completed.\r\n     * This bit remains 0 if the excitation detection has failed. Even after a\r\n     * successful detection, the bit will return to 0 when a software reset is\r\n     * performed.\r\n     * This bit becomes 1 if pole sensing is performed with the first servo ON\r\n     * command after startup and the operation is completed in case of ACON\r\n     * series controllers\r\n     */\r\n    PSNS = 1 << 9,\r\n\r\n    /**\r\n     * Push-motion operation in progress\r\n     * 0: Normal\r\n     * 1: Push-motion operation in progress\r\n     * This bit remains 1 while the actuator is performing a push-motion operation\r\n     * (excluding an approach operation. It will turn 0 under the following\r\n     * conditions:\r\n     * 1. The actuator has missed the push motion operation.\r\n     * 2. The actuator has paused.\r\n     * 3. The next movement command has been issued.\r\n     * 4. The servo has turned OFF.\r\n     */\r\n    PUSH = 1 << 10,\r\n\r\n    /**\r\n     * Home return status\r\n     * 0: Normal\r\n     * 1: Home return\r\n     * This bit remains 1 for as long as home return is in progress. This bit will be 0 in other cases.\r\n     */\r\n    GHMS = 1 << 11,\r\n\r\n    /**\r\n     * Operation mode status\r\n     * 0: AUTO mode\r\n     * 1: MANU mode\r\n     * This bit becomes 1 when the RC controller is in the MANU mode.\r\n     * Note that the controller is always in the MANU mode in cases of models not\r\n     * equipped with an operation mode switch (ERC2, PCON-SE, ACON-SE, PCON-CY and ACON-CY).\r\n     */\r\n    RMDS = 1 << 13,\r\n\r\n    /**\r\n     * Motor voltage low status\r\n     * 0: Normal\r\n     * 1: Motor drive source cut off\r\n     * This bit becomes 1 if there is no input from the motor drive power supply.\r\n     */\r\n    MPUV = 1 << 14,\r\n\r\n    /**\r\n     * Emergency stop status\r\n     * 0: Emergency stop input OFF\r\n     * 1: Emergency stop input ON\r\n     * This bit indicates the status of the emergency stop input port.\r\n     */\r\n    EMGP = 1 << 15,\r\n\r\n}\r\n\r\n/**\r\n * Control Flag Specification Register (CTLF) bit set\r\n */\r\nexport enum CTLF {\r\n\r\n    /**\r\n     * 0: Normal operation (default)\r\n     * 1: Push-motion operation\r\n     */\r\n    PUSH = 1 << 1,\r\n    /**\r\n     * 0: The direction of push-motion operation after completion of approach is defined as the forward direction (default).\r\n     * 1: The direction of push-motion operation after completion of approach is defined as the reverse direction\r\n     *\r\n     * This bit is used to calculate the direction of final stop position from PCMD. If this bit is\r\n     * set incorrectly, therefore, the target position will deviate from the specified position by a\r\n     * distance corresponding to “2 × INP, ” as shown in Fig. 5.3 below.\r\n     * If bit 1 is set to 0, the setting of this bit is invalid.\r\n     */\r\n    DIR = 1 << 2,\r\n    /**\r\n     * 0: Normal operation (default)\r\n     * 1: Incremental operation (pitch feed)\r\n     * Setting this bit to 1 will enable the actuator to operate relative to the current position.\r\n     * In this operation, the actuator behaves differently between normal operation and pushmotion operation (CTLF bit 1).\r\n     * While the travel is calculated with respect to the target position (PCMD) in normal operation,\r\n     * it is calculated relative to the current position in push-motion operation (when bit 1 = 1).\r\n     */\r\n    INC = 1 << 3,\r\n\r\n    /**\r\n     * Bit 6 (MOD0), 7 (MOD1)\r\n     * Refer to the table below. These bits cannot be set on PCON-* andERC2 controllers.)\r\n     * @example\r\n     * MOD1 MOD0 Function\r\n     * 0    0    Trapezoid pattern (default)\r\n     * 0    1    S-motion\r\n     * 1    0    Primary delay filter\r\n     * 1    1    Cannot be used.\r\n     */\r\n    MOD0 = 1 << 6,\r\n    /**\r\n     * See MOD0.\r\n     */\r\n    MOD1 = 1 << 7,\r\n}\r\n\r\nexport function enumBitSetFromNumber(bitset: number, allValues: any): ReadonlySet<number> {\r\n    const flags = new Set<number>();\r\n    Object.keys(allValues).forEach(v => {\r\n        const vNum = Number(v);\r\n        if (!isNaN(vNum) && ((bitset & vNum) === vNum)) {\r\n            flags.add(vNum);\r\n        }\r\n    });\r\n    return flags;\r\n}\r\n\r\nexport function numberFromEnumBitSet(values: readonly number[]): number {\r\n    let i: number = 0;\r\n    values.forEach(v => i |= v)\r\n    return i;\r\n}\r\n\r\nexport function enumNumberToString(allValues: any): ((n: number) => string) {\r\n    return (index) => allValues[index.toString()];\r\n}\r\n\r\n/**\r\n *  device status register 2 (0x9005)\r\n */\r\nexport enum DSS1 {\r\n\r\n    /**\r\n     * Position complete status\r\n     * 0: Positioning not yet complete\r\n     * 1: Position complete\r\n     * This bit turns 1 when the actuator has moved close enough the target position and entered\r\n     * the positioning band. It also turns 1 when the servo turns on after the actuator has started,\r\n     * because the controller recognizes that the actuator has completed a positioning to the current\r\n     * position.\r\n     * This bit will also become 1 during the push-motion operation as well as at the completion.\r\n     */\r\n    PEND = 1 << 3,\r\n\r\n    /**\r\n     * 0: Home return not yet complete\r\n     * 1: Home return complete\r\n     * This bit will become 1 when home return is completed. In case the absolute specification is\r\n     * set, the bit is set to 1 from the startup if absolute reset has been completed.\r\n     * If a movement command is issued while this bit is 0, an alarm will generate.\r\n     */\r\n    HEND = 1 << 4,\r\n\r\n    /**\r\n     * Pause status\r\n     * 0: Normal\r\n     * 1: Pause command active\r\n     * This bit remains 1 while a pause command is input.\r\n     * If the PIO/Modbus Switch Setting (5.4.16 or 6.5.16) is PIO enabled, paused PIO signals are\r\n     * monitored (set the switch to AUTO in case of RC controllers with a mode toggle switch). If\r\n     * Modbus is enabled, the Pause Commands (5.4.6 or 6.5.6) are monitored.\r\n     */\r\n    STP = 1 << 5,\r\n\r\n    /**\r\n     * Brake forced-release status\r\n     * 0: Brake actuated\r\n     * 1: Brake released\r\n     * This bit indicates the status of brake operation. Normally the bit remains 1 while the servo is\r\n     * ON. Even when the servo is OFF, changing the “brake forced-release command bit” in device\r\n     * control register 1 to 1 will change this bit to 1.\r\n     */\r\n    BKRL = 1 << 7,\r\n\r\n    /**\r\n     * Absolute error status\r\n     * 0: Normal\r\n     * 1: Absolute error present\r\n     * This bit will turn 1 if an absolute error occurs in case the absolute specification is set.\r\n     */\r\n    ABER = 1 << 8,\r\n\r\n    /**\r\n     * Minor failure status\r\n     * 0: Normal\r\n     * 1: Minor failure alarm present\r\n     * This bit will turn 1 when a message level alarm is generated.\r\n     */\r\n    ALML = 1 << 9,\r\n\r\n    /**\r\n     * 0: Normal\r\n     * 1: Major failure alarm present\r\n     * This bit will turn 1 if any alarm at the cold start level or operation cancellation level is generated.\r\n     * Alarms at the operation cancellation level can be reset by using an alarm reset command,\r\n     * but resetting alarms at the cold start level requires turning the power supply off and then on again.\r\n     */\r\n    ALMH = 1 << 10,\r\n\r\n\r\n    /**\r\n     * Missed work part in push-motion operation\r\n     * This bit turns 1 when the actuator has moved to the end of the push band without contacting the work part\r\n     * 0: Normal\r\n     * 1: Missed work part in push-motion operation\r\n     * This bit turns 1 when the actuator has moved to the end of the push band without contacting the work part (= the actuator has missed the work part) according to a push-motion operation command. Operation commands other than push-motion do not change this bit.\r\n     */\r\n    PSFL = 1 << 10,\r\n\r\n    /**\r\n     * Servo ON status\r\n     * 0: Servo OFF\r\n     * 1: Servo ON\r\n     * The servo ON status is indicated. After a servo ON command is issued, this bit will remain 0 until the servo ON delay time set by a parameter elapses.\r\n     * If the servo cannot be turned ON for some reason even after a servo ON command is received, this bit will remain 0.\r\n     * The RC controller does not accept any movement command while this bit is 0.\r\n     */\r\n    SV = 1 << 12,\r\n\r\n    /**\r\n     * Controller ready status\r\n     *  0: Controller busy\r\n     *  1: Controller ready\r\n     *  This bit indicates whether or not the controller can be controlled externally.\r\n     *  Normally this bit does not become 0 (busy).\r\n     */\r\n    PWR = 1 << 13,\r\n\r\n    /**\r\n     * Safety speed enabled status\r\n     * 0: Safety status disabled\r\n     * 1: Safety status enabled\r\n     * Enable/disable the safety speed of the controller using the “safety speed command bit” of device control register 1.\r\n     */\r\n    SFTY = 1 << 14,\r\n\r\n    /**\r\n     * EMG status\r\n     * 0: Emergency stop not actuated\r\n     * 1: Emergency stop actuated\r\n     * This bit indicates whether or not the controller is currently in the emergency stop mode due to\r\n     * an emergency stop input, cutoff of the drive source, etc.\r\n     */\r\n    EMGS = 1 << 15,\r\n\r\n}\r\n\r\n/**\r\n *  device status register 2 (0x9006)\r\n */\r\nexport enum DSS2 {\r\n    /**\r\n     * These bits output a position complete number as a binary value in PIO\r\n     pattern 4 or 5 (solenoid valve mode).\r\n     Each of these bits turns 1 when the actuator has completed a position\r\n     movement and become close enough to the target position by entering the\r\n     positioning band according to a position movement command (ST0 to ST7\r\n     in device control register 2).\r\n     Although the bit turns 0 once the servo is turned OFF, when the servo is\r\n     turned ON again the bit will turn 1 if the actuator is still within the positioning\r\n     band of the specified command position data.\r\n     Moreover, they will become 1 when push-motion is completed or missed in\r\n     push-motion operation.\r\n     */\r\n    PE0 = 1 << 0,\r\n    PE1 = 1 << 1,\r\n    PE2 = 1 << 2,\r\n    PE3 = 1 << 3,\r\n    PE4 = 1 << 4,\r\n    PE5 = 1 << 5,\r\n    PE6 = 1 << 6,\r\n    PE7 = 1 << 7,\r\n    JOGNegative = 1 << 8,\r\n    /**\r\n     * Jog+ status\r\n     * 0: Normal\r\n     * 1: “Jog+” command active\r\n     * This bit becomes 1 while the “jog+ command bit” of device control register 2 is selected.\r\n     */\r\n    JOGPositive = 1 << 9,\r\n    /**\r\n     * Position-data load command status\r\n     * 0: Normal\r\n     * 1: Position data load complete\r\n     * Setting the “position-data load command bit” in device control register 2 to 1\r\n     * will change this bit to 0. This bit will turn 1 once position data has been\r\n     * written to the EEPROM successfully.\r\n     */\r\n    TEAC = 1 << 10,\r\n\r\n    /**\r\n     * Teaching mode status\r\n     * 0: Normal operation mode\r\n     * 1: Teaching mode\r\n     * This bit becomes 1 when the teaching mode is selected by the “teach mode\r\n     * command bit” of device control register 2.\r\n     */\r\n    MODS = 1 << 11,\r\n\r\n    /**\r\n     * Torque level status\r\n     * 0: Normal\r\n     * 1: Torque level achieved\r\n     * This bit turns 1 when the current has reached a level corresponding to the\r\n     * specified push torque during a push-motion operation.\r\n     * Since this bit indicates a level, its status will change when the current level changes.\r\n     */\r\n    TRQS = 1 << 12,\r\n\r\n    /**\r\n     * Load output judgment status\r\n     * 0: Normal\r\n     * 1: Load output judgment\r\n     * If a load current threshold or check range (individual zone boundaries: only supported by PCON-CF) is set when a movement command is issued, this bit indicates whether or not the motor current has reached the threshold inside the check range.\r\n     * This bit maintains the current value until the next position command is received.\r\n     */\r\n    LOAD = 1 << 12,\r\n\r\n    /**\r\n     * Enable\r\n     * 0: Disable condition(Operation Stop, Servo OFF)\r\n     * 1: Enable condition (normal operation)\r\n     * It shows the condition of the enable switch when a teaching tool that is equipped with an enable switch (dead man’s switch) is connected to a model that has the enable function equipped.\r\n     * (Note) It is fixed to 1 when in AUTO Mode or for a model without the enable function being equipped.\r\n     */\r\n    ENBS = 1 << 15,\r\n}\r\n\r\nexport enum FunctionCode {\r\n    ReadCoilStatus = 0x01,\r\n    ReadInputStatus = 0x02,\r\n    ReadHoldingRegisters = 0x03,\r\n    ReadInputRegisters = 0x04,\r\n    ForceSingleCoil = 0x05,\r\n    PresetSingleRegister = 0x06,\r\n    ReadExceptionStatus = 0x07,\r\n    ForceMultipleCoils = 0x0F,\r\n    PresetMultipleRegisters = 0x10,\r\n    ReportSlaveId = 0x11,\r\n    ReadWriteRegister = 0x17\r\n}\r\n\r\n/**\r\n * Queries the first 10 Status registers.\r\n */\r\nexport const queryStatusRegisters = queryHoldingRegisters(0x9000, 10);\r\n\r\n\r\nexport function parseQueryStatusRegisterResponse(response: Uint8Array): { pnow: number, almc: number, dipm:number, dipo:number, dss1: Set<DSS1>, dss2: Set<DSS2>, dsse: Set<DSSE>, stat: Set<STAT> } {\r\n    const responseData = parseQueryHoldingRegistersResponse(response);\r\n    const view = new DataView(responseData);\r\n\r\n    const pnow = view.getInt32(0);\r\n    const almc = view.getInt16(4);\r\n    const dipm = view.getInt16(6);\r\n    const dipo = view.getInt16(8);\r\n    const dss1 = enumBitSetFromNumber(view.getUint16(10), DSS1) as any as Set<DSS1>\r\n    const dss2 = enumBitSetFromNumber(view.getUint16(12), DSS2) as any as Set<DSS2>;\r\n    const dsse = enumBitSetFromNumber(view.getUint16(14), DSSE) as any as Set<DSSE>;\r\n    const stat = enumBitSetFromNumber(view.getUint32(16), STAT) as any as Set<STAT>;\r\n    return {pnow, almc, dipm, dipo, dss1, dss2, dsse, stat}\r\n}\r\n\r\n\r\n\r\nfunction buildResetAlarm(reset: boolean) {\r\n    return forceSingleCoil(0x0407, reset ? 0xFF00 : 0x00);\r\n}\r\n\r\nexport function setSafetySpeedEnabled(enabled: boolean) {\r\n    return forceSingleCoil(0x0401, enabled ? 0xFF00 : 0x00);\r\n}\r\n\r\n/**\r\n * ALRS\r\n * When the alarm reset edge is turned on (the data is first set to FF00 and then changed to 0000),\r\n * alarms will be reset.\r\n * Requires both commands to be sent.\r\n */\r\nexport const resetAlarm: Readonly<[ArrayBuffer, ArrayBuffer]> = [buildResetAlarm(true), buildResetAlarm(false)]\r\n\r\n/**\r\n * Brake Forced Release BKRL TODO: test\r\n */\r\nexport function forceReleaseBreak(release: boolean): ArrayBuffer {\r\n    return forceSingleCoil(0x0408, release ? 0xFF00 : 0x0000)\r\n}\r\n\r\n\r\n\r\nexport const pioModbusOnCommand = pioModbusSwitch(true);\r\n\r\n\r\nexport function servoOnCommand(on: boolean): ArrayBuffer {\r\n    return forceSingleCoil(0x0403, on ? 0xFF00 : 0x0000)\r\n}\r\n\r\n/**\r\n * Direct writing of positioning Data Target position coordinate specification register PCMD 9900 Register size 2 register 4 bytes (Unit 0.01 mm)\r\n */\r\nexport function positionCommand(targetPosition: number): ArrayBuffer {\r\n    const buffer = new ArrayBuffer(13);\r\n    writeHeader(FunctionCode.PresetMultipleRegisters, buffer)\r\n    const v = new DataView(buffer);\r\n    v.setInt16(2, 0x9900) //target position specification register\r\n    v.setInt16(4, 0x0002) // register count\r\n    v.setInt8(6, 0x04) // byteCount\r\n    v.setInt32(7, targetPosition) // unsigned might be used for relative offsets\r\n    v.setUint16(11, crc16modbus(Buffer.from(buffer, 0, 11) as Buffer), true)\r\n    return buffer;\r\n}\r\n\r\nfunction pioModbusSwitch(modbus: boolean): ArrayBuffer {\r\n    return forceSingleCoil(0x0427, modbus ? 0xFF00 : 0x0000)\r\n}\r\n\r\nfunction buildHomeReturn(ret: boolean): ArrayBuffer {\r\n    const buffer = new ArrayBuffer(8);\r\n    writeHeader(FunctionCode.ForceSingleCoil, buffer)\r\n    const d1 = new DataView(buffer);\r\n    d1.setUint16(2, 0x040B);\r\n    d1.setUint16(4, ret ? 0xFF00 : 0x0000);\r\n    d1.setUint16(6, crc16modbus(Buffer.from(buffer, 0, 6)), true);\r\n    return buffer;\r\n}\r\n\r\n/**\r\n * Two commands to initiate a homing operation.\r\n */\r\nexport const homeReturn: Readonly<[ArrayBuffer, ArrayBuffer]> = [buildHomeReturn(false), buildHomeReturn(true)]\r\n\r\n\r\nexport function positionVelocityAndAccelerationCommand(targetPosition: number, velocity: number, acceleration: number, targetPositionBand: number = 10): ArrayBuffer {\r\n    const buffer = new ArrayBuffer(23);\r\n    writeHeader(FunctionCode.PresetMultipleRegisters, buffer)\r\n    const v = new DataView(buffer);\r\n    v.setInt16(2, 0x9900); //target position specification register\r\n    v.setInt16(4, 0x0007); // register count\r\n    v.setInt8(6, 0x0E); // byteCount\r\n    v.setInt32(7, targetPosition); // unsigned might be used for relative offsets\r\n    v.setUint32(11, targetPositionBand);\r\n    v.setUint32(15, velocity);\r\n    v.setUint16(19, acceleration);\r\n    v.setUint16(21, crc16modbus(Buffer.from(buffer, 0, 21)), true);\r\n    return buffer;\r\n}\r\n\r\n/**\r\n * Positioning Data Direct Writing (Queries Using Code 10))\r\n * Produces a reponse of size 8 bytes;\r\n * VCMD Speed specification register (2 byte in 0.01 mm/sec) Writing 3 registers, each 2 bytes\r\n * ACMD Acceleration/deceleration specification register (1 byte in 0.01 G)\r\n * @param targetPosition target position in mm/100\r\n * @param targetPositionBand in mm/100 (default is 0.1 mm)\r\n * @param velocity in mm/100 (good value is 10 000)\r\n * @param acceleration in g/100 (valid is [1, 300], good value is 30)\r\n * @param pushCurrentLimitingValue Set the current limit during push-motion operation in PPOW. Range: [51-178] (equiv of 20% to 70% of 255). 0 means no limit.\r\n * @param controlFlags\r\n */\r\nexport function numericalValueMovementCommand(\r\n    targetPosition: number,\r\n    targetPositionBand: number = 10,\r\n    velocity: number,\r\n    acceleration: number,\r\n    pushCurrentLimitingValue: number,\r\n    controlFlags: readonly CTLF[]): ArrayBuffer {\r\n\r\n    const buffer = new ArrayBuffer(27);\r\n    writeHeader(FunctionCode.PresetMultipleRegisters, buffer);\r\n    const view = new DataView(buffer);\r\n    view.setUint16(2, 0x9900);\r\n    view.setUint16(4, 0x0009);\r\n    view.setUint8(6, 0x12);\r\n    view.setInt32(7, targetPosition); // unsigned might be used for relative offsets\r\n    view.setInt32(11, targetPositionBand);\r\n    view.setUint32(15, velocity);\r\n    view.setUint16(19, acceleration);\r\n    view.setUint16(21, pushCurrentLimitingValue);\r\n    view.setUint16(23, numberFromEnumBitSet(controlFlags));\r\n    view.setUint16(25, crc16modbus(Buffer.from(buffer, 0, 25)), true);\r\n    return buffer;\r\n}\r\n\r\n/**\r\n * Parses a response if it is an exception.\r\n */\r\nexport function parseException(response: Uint8Array): { originalFunctionCode: number, exceptionCode: number, exceptionMessage: string } {\r\n    crcCheck(response);\r\n    const view = new DataView(response.buffer);\r\n    const functionCode = view.getUint8(1);\r\n    if ((functionCode & 0x80) !== 0x80) {\r\n        throw new Error(\"Response is not an exception (Function Code MSB is not set to 1).\")\r\n    }\r\n    const originalFunctionCode = functionCode ^ 0x80;\r\n    const exceptionCode = view.getUint8(2);\r\n    const exceptionMessage = exceptionMap[exceptionCode - 1] || 'Unknown Exception Code';\r\n    return {originalFunctionCode, exceptionCode, exceptionMessage}\r\n}\r\n\r\nconst exceptionMap = [\r\n    'Illegal Function',\r\n    'Illegal Data Address',\r\n    'Illegal Data Value',\r\n    'Slave Device Failure'\r\n];\r\n\r\n\r\n/**\r\n * DSS1/2 Controller Status Signal Reading 1 (reading two registers DSS1 and DSS2)\r\n */\r\n/**\r\nexport const queryDeviceStatusCommand =  queryHoldingRegisters(0x9005, 2);\r\n\r\nexport function parseDeviceStatusResponse(response: Uint8Array): { dss1: Set<DSS1>, dss2: Set<DSS2> } {\r\n    const responseData = parseQueryHoldingRegistersResponse(response);\r\n    const view = new DataView(responseData);\r\n    const dss1 = enumBitSetFromNumber(view.getUint16(0), DSS1) as any as Set<DSS1>\r\n    const dss2 = enumBitSetFromNumber(view.getUint16(2), DSS2) as any as Set<DSS2>;\r\n    //console.info(`Parsed parseDeviceStatusResponse from response: ${response} dss1: ${Array.from(dss1)} (${Array.from(dss1).map(enumNumberToString(DSS1))})  dss2:${Array.from(dss2).map(enumNumberToString(DSS2))}`)\r\n    return {dss1, dss2}\r\n}\r\n **/\r\n\r\n/**\r\n * Queries: TODO: check if shockspot hardware supports this at all\r\n * - Total moving count (TLMC) 2Registers, 4bytes\r\n * - Total moving distance (ODOM) 2Registers, 4bytes (unit of 1m)\r\n */\r\nexport function queryDeviceMovementHistory(): ArrayBuffer {\r\n    return queryHoldingRegisters(0x8400, 4);\r\n}\r\n\r\nexport function parseDeviceMovementHistory(response: Uint8Array): { totalMovingCount: number, totalMovingDistance: number } {\r\n    const data = parseQueryHoldingRegistersResponse(response);\r\n    const view = new DataView(data);\r\n    return {totalMovingCount: view.getUint32(0), totalMovingDistance: view.getUint32(4)}\r\n}\r\n\r\n/**\r\n * Queries: TODO: check if force feedback is supported at all\r\n * - Force Feedback Data Reading (FBFC) 2 registers, 4bytes (unit 0.01 N.)\r\n */\r\nexport function queryForceFeedback(): ArrayBuffer {\r\n    return queryHoldingRegisters(0x901E, 2);\r\n}\r\n\r\n\r\n/**\r\n *  Deceleration Stop <<STOP>>\r\n * The actuator will start decelerating to a stop when the deceleration stop command edge (write FF00H) is turned on.\r\n */\r\nexport const decelerationStopCommand = forceSingleCoil(0x042C, 0xFF00);\r\n\r\n\r\n\r\n/**\r\n * Register reading DIPM Input port query  Input port monitor register (9003), 2 registers,\r\n * Used to determine if the hand switch is pressed.\r\n * TODO: Why are two registers read?\r\n */\r\nexport const queryInputSignalStatus = queryHoldingRegisters(0x9003, 2);\r\n\r\nexport function parseInputSignalStatusResponse(response: Uint8Array): { inputStatus: number } {\r\n    crcCheck(response);\r\n    const buffer = response.buffer;\r\n    const view = new DataView(buffer);\r\n    return {inputStatus: view.getUint16(7)};\r\n    // Data of Register Read (03) starts at character 7\r\n}\r\n\r\nfunction forceSingleCoil(address: number, data: number): ArrayBuffer {\r\n    const buffer = new ArrayBuffer(8);\r\n    writeHeader(FunctionCode.ForceSingleCoil, buffer);\r\n    const view = new DataView(buffer);\r\n    view.setUint16(2, address);\r\n    view.setUint16(4, data);\r\n    view.setUint16(6, crc16modbus(Buffer.from(buffer, 0, 6) as Buffer), true);\r\n    return buffer;\r\n}\r\n\r\nfunction writeHeader(functionCode: number, buffer: ArrayBuffer) {\r\n    const v = new DataView(buffer);\r\n    v.setInt8(0, 0x01);\r\n    v.setInt8(1, functionCode);\r\n}\r\n\r\nfunction queryHoldingRegisters(address: number, registers: number) {\r\n    const buffer = new ArrayBuffer(8);\r\n    writeHeader(FunctionCode.ReadHoldingRegisters, buffer);\r\n    const view = new DataView(buffer);\r\n    view.setUint16(2, address);\r\n    view.setUint16(4, registers);\r\n    view.setUint16(6, crc16modbus(Buffer.from(buffer, 0, 6)), true);\r\n    return buffer;\r\n}\r\n\r\nfunction parseQueryHoldingRegistersResponse(response: Uint8Array): ArrayBufferLike {\r\n    crcCheck(response);\r\n    const view = new DataView(response.buffer);\r\n    const numberOfDataBytes = view.getUint8(2);\r\n    return view.buffer.slice(3, 3 + numberOfDataBytes);\r\n}\r\n\r\n/**\r\n * This query reads the code indicating the normal status or alarm status (cold start level, operation cancellation level and message level) of the controller.\r\n * In the normal status, 0x00 is stored.\r\n */\r\nexport const presentAlarmCodeReading = queryHoldingRegisters(0x9002, 1);\r\n\r\nexport function parsePresentAlarmCodeResponse(response: Uint8Array) {\r\n    const data = parseQueryHoldingRegistersResponse(response);\r\n    if (data.byteLength !== 2) {\r\n        throw new Error(\"Expected a 2 byte response but got \" + data.byteLength);\r\n    }\r\n    return new DataView(data).getUint16(0);\r\n}\r\n\r\nexport const alarmDetailDescriptionReading = queryHoldingRegisters(0x0500, 6);\r\n\r\nexport function parseAlarmDetailDescriptionReadingResponse(response: Uint8Array) {\r\n    const data = parseQueryHoldingRegistersResponse(response);\r\n    if (data.byteLength !== 12) {\r\n        throw new Error(\"Expected a 12 byte response but got \" + data.byteLength);\r\n    }\r\n    const view = new DataView(data);\r\n    const detailCode = view.getUint16(0);\r\n    const address = view.getUint16(2);\r\n    const code = view.getUint32(4);\r\n    const occurrenceTime = view.getUint32(8);\r\n\r\n    return {\r\n        detailCode,\r\n        address,\r\n        code,\r\n        occurrenceTime\r\n    }\r\n}\r\n\r\nfunction crcCheck(response: Uint8Array): void {\r\n    if (response.length < 4) {\r\n        throw new Error(\"Response must be at least 4 bytes long.\");\r\n    }\r\n    const dataView = new DataView(response.buffer);\r\n    const expectedCrc = crc16modbus(Buffer.from(response.buffer, 0, response.length - 2) as Buffer);\r\n    const presentedCrc = dataView.getUint16(response.length - 2, true);\r\n    if (expectedCrc !== presentedCrc) {\r\n        throw new Error(`CRC missmatch: Expected ${presentedCrc} but received ${expectedCrc}`);\r\n    }\r\n}","import {\r\n    DSS1,\r\n    homeReturn,\r\n    numericalValueMovementCommand, parseQueryStatusRegisterResponse,\r\n    pioModbusOnCommand, queryStatusRegisters,\r\n    resetAlarm,\r\n    servoOnCommand, setSafetySpeedEnabled\r\n} from \"./knockRodProtocol\";\r\nimport {Task, TaskTimer} from 'tasktimer';\r\nimport {Mutex, withTimeout} from \"async-mutex\";\r\nimport {KnockRodState} from \"./knockRodState\";\r\nimport {clamp, range} from \"./interpol\";\r\n\r\n\r\nexport interface ConnectedEvent extends CustomEvent<{}> {\r\n    readonly type: 'connected'\r\n}\r\n\r\nexport interface ReadyEvent extends CustomEvent<{}> {\r\n    readonly type: 'ready'\r\n}\r\n\r\nexport interface StateChangeEvent extends CustomEvent<{ oldState: KnockRodState, state: KnockRodState }> {\r\n    readonly type: 'stateChange'\r\n}\r\n\r\n\r\nexport interface PalmDownButtonEvent extends CustomEvent<{ oldState: KnockRodState, state: KnockRodState }> {\r\n    readonly type: 'palmdown'\r\n}\r\n\r\nexport interface PalmUpButtonEvent extends CustomEvent<{ oldState: KnockRodState, state: KnockRodState }> {\r\n    readonly type: 'palmup'\r\n}\r\n\r\n\r\nexport enum ShockRodSize {\r\n    FourInch = 100,\r\n    SixInch = 150,\r\n    EightInch = 200,\r\n    TenInch = 250,\r\n    TwelveInch = 300\r\n}\r\n\r\n\r\ninterface ThrusterEventHandlersEventMap {\r\n    \"connected\": ConnectedEvent;\r\n    \"stateChange\": StateChangeEvent;\r\n    \"ready\": ReadyEvent;\r\n    \"palmdown\": PalmDownButtonEvent;\r\n    \"palmup\": PalmUpButtonEvent;\r\n}\r\n\r\ninterface Trace {\r\n    readonly time: number;\r\n    readonly pos: number;\r\n    readonly dest?: {\r\n        readonly pos: number\r\n        readonly time: number;\r\n    }\r\n}\r\n\r\nexport class KnockRod extends DocumentFragment {\r\n\r\n    /**\r\n     *  Silent interval: 9600 bps, (10 × 3.5) bits × 1/19200 bps = 1.823ms ~= 2\r\n     */\r\n    public static readonly silentInterval: number = 2;\r\n\r\n    public static readonly SERIAL_OPTIONS: SerialOptions = {\r\n        baudRate: 19200,\r\n        dataBits: 8,\r\n        stopBits: 1,\r\n        parity: 'none',\r\n    }\r\n\r\n    private _state: KnockRodState | undefined = undefined\r\n\r\n    private oscillator = {min: 0, max: 1, speed: 0, out: false, active: false, acceleration: 30}\r\n    private oscillatorTimer?: number  = undefined;\r\n\r\n\r\n    private onOscillate = async () => {\r\n        console.info(\"onOscillate\", this.oscillator)\r\n        const maxSpeed = 40000;\r\n        const effectiveSpeed = this.oscillator.speed * maxSpeed\r\n        if (this.oscillator.active) {\r\n\r\n            const duration = ((this.oscillator.max - this.oscillator.min) * this.size * 1000) / (effectiveSpeed) * 100;\r\n            console.info('travel duration:' + duration)\r\n            window.clearTimeout(this.oscillatorTimer)\r\n            this.oscillatorTimer = window.setTimeout(this.onOscillate.bind(this), duration+10);\r\n\r\n        } else if (this.oscillatorTimer) {\r\n            window.clearTimeout(this.oscillatorTimer)\r\n            return;\r\n        }\r\n\r\n        const targetPosition = (this.oscillator.out ? this.oscillator.min : this.oscillator.max) * this.size * 100;\r\n\r\n        await this.moveTo(targetPosition, effectiveSpeed, this.oscillator.acceleration)\r\n\r\n        this.oscillator = {...this.oscillator, out: !this.oscillator.out}\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param speed 0..1\r\n     * @param lower 0..1\r\n     * @param upper 0..1 > lower\r\n     */\r\n    public async oscillate(speed: number, lower: number, upper:number, acceleration: number) {\r\n        const alreadyActive = this.oscillator.active && this.oscillatorTimer;\r\n        const speedChange = speed !== this.oscillator.speed\r\n        this.oscillator = {...this.oscillator, min: lower, max: upper, speed, active: speed > 0, acceleration}\r\n        if (!alreadyActive || speedChange) {\r\n            return await this.onOscillate();\r\n        }\r\n    }\r\n\r\n\r\n    public get state(): KnockRodState | undefined {\r\n        return this._state;\r\n    }\r\n\r\n    private trace: Trace = {\r\n        time: performance.now(),\r\n        pos: 0,\r\n        dest: undefined\r\n    }\r\n\r\n    /**\r\n     * Returns the position where the rod is expected to be currently.\r\n     */\r\n    public getEstimatedPosition(): number {\r\n        if (!this.trace.dest) {\r\n            return this.trace.pos\r\n        }\r\n        const now = performance.now()\r\n        if (now > this.trace.dest.time) {\r\n            return this.trace.dest.pos;\r\n        }\r\n        return range(this.trace.time, this.trace.pos, this.trace.dest.time, this.trace.dest.pos, now)\r\n    }\r\n\r\n    private updateState(updater: (old: KnockRodState) => KnockRodState) {\r\n        const oldState = this._state || {\r\n            deviceStatusRegister1: new Set(),\r\n            deviceStatusRegister2: new Set(),\r\n            expansionDeviceStatus: new Set(),\r\n            systemStatusRegister: new Set(),\r\n            currentPosition: 0,\r\n            input: 0,\r\n        };\r\n        this._state = updater(oldState);\r\n\r\n\r\n        if ((this._state.input & 0x0001) === 1) {\r\n            this.dispatchEvent(new CustomEvent('palmdown') as PalmDownButtonEvent);\r\n        } else if ((this._state.input & 0x0001) === 0 && (oldState.input & 0x0001) === 1) {\r\n            this.dispatchEvent(new CustomEvent('palmup') as PalmUpButtonEvent);\r\n        }\r\n\r\n        this.dispatchEvent(new CustomEvent('stateChange', {detail: {oldState, state: this._state}}) as StateChangeEvent);\r\n    }\r\n\r\n\r\n\r\n    constructor(private readonly port: SerialPort, public readonly size: ShockRodSize) {\r\n        super();\r\n    }\r\n\r\n    public async setSafetySpeed(enabled: boolean): Promise<void> {\r\n        const release = await withTimeout(this.mutex, 100).acquire();\r\n        try {\r\n            await this.writeBytes(setSafetySpeedEnabled(enabled)); // ALRS Alarm reset command\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(setSafetySpeedEnabled(enabled).byteLength)));\r\n        } finally {\r\n            release();\r\n        }\r\n    }\r\n\r\n    public async resetAlarm(): Promise<void> {\r\n        const release = await withTimeout(this.mutex, 100).acquire();\r\n        try {\r\n            await this.writeBytes(resetAlarm[0]); // ALRS Alarm reset command\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(resetAlarm[0].byteLength)));\r\n            await this.wait(20);\r\n            await this.writeBytes(resetAlarm[1]); // ALRS Alarm reset command  (2)\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(resetAlarm[0].byteLength)));\r\n        } finally {\r\n            release();\r\n        }\r\n    }\r\n\r\n    public async moveRetract(): Promise<void> {\r\n        this.timer.add(new Task({\r\n            id: \"task-move-retract\",\r\n            totalRuns: 1,\r\n            removeOnCompleted: true,\r\n            callback: () => this.queryAwaitResponseWithRetry(numericalValueMovementCommand(\r\n                100,\r\n                10,//10,\r\n                30000,\r\n                30,\r\n                0, //51,\r\n                []), 8, (a) => a, 1, 0)\r\n        }));\r\n        return Promise.resolve();\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param targetPosRel 0..1\r\n     * @param duration milliseconds\r\n     * @param acceleration 1-100\r\n     */\r\n    public async moveToWithin(targetPosRel: number, duration: number, acceleration: number): Promise<void> {\r\n\r\n        if (this.oscillator.active) {\r\n            this.oscillator = {...this.oscillator, active:  false}\r\n            window.clearTimeout(this.oscillatorTimer)\r\n        }\r\n        const currentPos = this.getEstimatedPosition();\r\n        const targetPos = targetPosRel * this.size * 100\r\n\r\n        const distance = Math.abs(currentPos - targetPos);\r\n        const speed = distance / (Math.max(1,duration)) * 1000\r\n        if (speed === 0) {\r\n            return;\r\n        }\r\n\r\n        return await this.moveTo(targetPos, speed, acceleration);\r\n    }\r\n\r\n    public async moveTo(targetPos:number, speed:number, acceleration: number): Promise<void> {\r\n        const clampedSpeed = clamp(speed,1, 50000)\r\n        const clampedTargetPos = clamp(targetPos,0, this.size * 100)\r\n\r\n\r\n        await this.mutex.runExclusive(async () => {\r\n            const distanceToDest = Math.abs(this.trace.pos - targetPos)\r\n            const durationToDest = distanceToDest / speed\r\n            const pos = this.getEstimatedPosition()\r\n            const time = performance.now()\r\n            const targetTime = durationToDest + time\r\n            this.trace = { time, pos, dest: { pos: targetPos, time: targetTime } }\r\n            await this.writeBytes(numericalValueMovementCommand(\r\n                clampedTargetPos,\r\n                10,//10,\r\n                clampedSpeed,\r\n                acceleration,\r\n                0,//51, //51,\r\n                []));\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(homeReturn[0].byteLength)));\r\n        })\r\n    }\r\n\r\n    public async moveSimple(): Promise<void> {\r\n        return this.moveTo(20000, 30000, 30);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Homing may take up to 10 seconds\r\n     */\r\n    public async home(): Promise<void> {\r\n        const release = await withTimeout(this.mutex, 100).acquire();\r\n        try {\r\n            await this.writeBytes(homeReturn[0]);\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(homeReturn[0].byteLength)));\r\n            await this.wait(KnockRod.silentInterval);\r\n            await this.writeBytes(homeReturn[1]);\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(homeReturn[0].byteLength)));\r\n        } finally {\r\n            release()\r\n        }\r\n        // let the homing status status settle\r\n        await this.wait(200);\r\n        // wait for up to 12 seconds for homing to become complete\r\n        try {\r\n            await this.waitUntil(12000, () => this.state?.deviceStatusRegister1.has(DSS1.HEND) || false);\r\n            this.trace = {pos: 0, time: performance.now()}\r\n        } catch (e) {\r\n            throw new Error(\"Homing was not successful, waited for 12 seconds\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public addEventListener<K extends keyof ThrusterEventHandlersEventMap>(type: K, listener: ((evt: ThrusterEventHandlersEventMap[K]) => any) | EventListenerObject | null, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type as string, listener as (evt: Event) => any, options);\r\n    }\r\n\r\n    /*\r\n    public removeEventListener<K extends keyof ThrusterEventHandlersEventMap>(type: K, listener: (this: KnockRod, ev: ThrusterEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void {\r\n        super.removeEventListener(type, listener, options)\r\n    }\r\n    */\r\n\r\n    private writer: WritableStreamDefaultWriter<Uint8Array> | undefined = undefined;\r\n    private reader: ReadableStreamDefaultReader<Uint8Array> | undefined = undefined;\r\n\r\n\r\n    private readonly timer = new TaskTimer(80);\r\n    private readonly mutex = new Mutex();\r\n\r\n    public async setServo(on: boolean) {\r\n        console.info(\"setting servo \" + (on ? 'on' : 'off'));\r\n        const release = await withTimeout(this.mutex, 100).acquire();\r\n        try {\r\n            await this.writeBytes(servoOnCommand(on)); // SON Servo ON/OFF  Servo ON (FF00)\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(servoOnCommand(on).byteLength)));\r\n        } finally {\r\n            release();\r\n        }\r\n    }\r\n\r\n    public async init(): Promise<void> {\r\n\r\n        await this.port.open(KnockRod.SERIAL_OPTIONS);\r\n        this.writer = this.port.writable!.getWriter();\r\n        this.reader = this.port.readable!.getReader();\r\n\r\n        await this.resetAlarm();\r\n\r\n        const release = await withTimeout(this.mutex, 100).acquire();\r\n        try {\r\n            await this.writeBytes(pioModbusOnCommand); // PMSL PIO/Modbus Switching Setting (Enable Modus commands)\r\n            console.info(\"response: \" + KnockRod.toHex(await this.readBytes(pioModbusOnCommand.byteLength)));\r\n        } finally {\r\n            release();\r\n        }\r\n\r\n        await this.setServo(true);\r\n\r\n        //await this.writeBytes(ThrusterProtocol.queryDeviceStatusCommand());\r\n        //await this.wait(10);\r\n\r\n        await this.queryStatusRegister();\r\n\r\n        dispatchEvent(new CustomEvent('connected', {}) as ConnectedEvent);\r\n\r\n        // schedule status polling\r\n        this.timer.add(new Task({\r\n            id: \"task-poll-status\",\r\n            tickInterval: 1,\r\n            removeOnCompleted: false,\r\n            callback: (_task: Task) => this.queryStatusRegister().catch((e) => {\r\n                console.log(\"Status query polling failed. Stopping now.\", e);\r\n                _task.enabled = false;\r\n            })\r\n        }));\r\n\r\n\r\n        // home if necessary\r\n        if (!this.state?.deviceStatusRegister1.has(DSS1.HEND)) {\r\n            console.info(\"Started Homing. Waiting for homing to complete...\");\r\n            await this.home();\r\n\r\n            console.info(\"Waited for homing completed.\")\r\n        }\r\n\r\n        this.timer.start();\r\n\r\n        dispatchEvent(new CustomEvent('ready', {}) as ReadyEvent\r\n        );\r\n\r\n\r\n\r\n\r\n        console.info(\"Initialize complete.\")\r\n\r\n    }\r\n\r\n    private async queryStatusRegister() {\r\n        return this.queryAwaitResponseWithRetry(queryStatusRegisters,\r\n            25,\r\n            (r) => parseQueryStatusRegisterResponse(r)\r\n            , 1, 0).then((r) => {\r\n            this.updateState((old) => ({\r\n                ...old,\r\n                currentPosition: r.pnow,\r\n                expansionDeviceStatus: r.dsse,\r\n                deviceStatusRegister1: r.dss1,\r\n                deviceStatusRegister2: r.dss2,\r\n                systemStatusRegister: r.stat,\r\n                input: r.dipm\r\n            }));\r\n            return r;\r\n        })\r\n    }\r\n\r\n    private static joinArr(a: readonly Uint8Array[]): Uint8Array {\r\n        if (a.length === 1) {\r\n            return a[0];\r\n        } else {\r\n            const totalLength = new Int8Array(a.reduce((akk, nxt) => akk + nxt.length, 0));\r\n            const resArray = new Uint8Array(totalLength);\r\n            let length = 0;\r\n            for (let array of a) {\r\n                resArray.set(array, length);\r\n                length += array.length;\r\n            }\r\n            return resArray;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Retries query until it is followed by a response matched by the responseExtractor (emitting a non undefined value).\r\n     * @param query the command to execute on each retry.\r\n     * @param responseSize the size of the response that is expected.\r\n     * @param responseExtractor response matcher that should extract only a value when it matches. If it fails it should return undefined.\r\n     * @param retryCount How often should the query be retried.\r\n     * @param retryInterval How much time should be waited between different query attempts.\r\n     */\r\n    private async queryAwaitResponseWithRetry<T>(query: ArrayBufferLike, responseSize: number, responseExtractor: (a: Uint8Array) => T | undefined, retryCount: number | undefined = undefined, retryInterval: number | undefined = undefined): Promise<T> {\r\n        const actualRetryCount = retryCount || 3;\r\n        const actualRetryInterval = retryInterval || 100;\r\n        const actualReadTimeout = 100;\r\n\r\n        for (let i = 0; i < actualRetryCount; ++i) {\r\n            const releaser = await withTimeout(this.mutex, 200).acquire();\r\n            try {\r\n                await this.writeBytes(query);\r\n\r\n                const readResponse = await Promise.any([this.readBytes(responseSize), this.wait(actualReadTimeout).then(() => undefined)]);\r\n\r\n                let extracted: T | undefined;\r\n                try {\r\n                    extracted = readResponse ? responseExtractor(readResponse) : undefined;\r\n                } catch (e) {\r\n                    //console.log(\"response extractor failed with: \" + e)\r\n                    extracted = undefined;\r\n                }\r\n\r\n                if (extracted !== undefined) {\r\n                    return extracted;\r\n                } else {\r\n                    console.log(\"response extractor failed for response: \" + readResponse)\r\n                }\r\n            } finally {\r\n                releaser();\r\n            }\r\n            await this.wait(actualRetryInterval);\r\n        }\r\n        throw new Error(\"Retried \" + actualRetryCount + \" but failed to accept response.\");\r\n\r\n    }\r\n\r\n    private static toHex(buf: Uint8Array | undefined): string | undefined {\r\n        if (buf === undefined) {\r\n            return undefined;\r\n        }\r\n        return [...buf].map((x: number) => x.toString(16).padStart(2, '0')).join('').toUpperCase();\r\n    }\r\n\r\n    private async readBytes(expectedBytes: number): Promise<Uint8Array | undefined> {\r\n        let reads: Uint8Array[] = [];\r\n        let readBytes: number = 0;\r\n\r\n        while (readBytes < expectedBytes) {\r\n            const res = await this.reader!.read();\r\n            if (res.done) {\r\n                break;\r\n            } else {\r\n                readBytes += res.value!.length;\r\n                reads.push(res.value!);\r\n            }\r\n        }\r\n\r\n        return KnockRod.joinArr(reads);\r\n    }\r\n\r\n    private async writeBytes(cmd: ArrayBufferLike): Promise<void> {\r\n        const uint8Array = new Uint8Array(cmd);\r\n\r\n        await this.writer!.write(uint8Array);\r\n    }\r\n\r\n    private async wait(ms: number) {\r\n        await new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n\r\n    private async waitUntil(ms: number, test: () => boolean, periodMs: number = 100) {\r\n        const until = new Date().getTime() + ms;\r\n        while (!test()) {\r\n            await this.wait(periodMs);\r\n            if (new Date().getTime() > until) {\r\n                throw new Error(`Waited for ${test} for ${ms}ms.`);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export const lerp = (x: number, y: number, a: number) => x * (1 - a) + y * a;\nexport const invlerp = (x: number, y: number, a: number) => clamp((a - x) / (y - x));\nexport const clamp = (a: number, min = 0, max = 1) => Math.min(max, Math.max(min, a));\nexport const range = (\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    a: number\n) => lerp(x2, y2, invlerp(x1, y1, a));","import {Dispatch} from \"react\";\n\n\nexport interface XToysConfig {\n  readonly websocket: string;\n  readonly token: string;\n}\n\nexport type XToysCommandUnion = SpeedMessage | PositionMessage\n\n/**\n * either \"speed\" or \"position\" depending on what mode the user has selected on the toy controls\n */\nexport type XToysCommandMode = 'speed' | 'position'\nexport type XToysCommand = {\n  mode: XToysCommandMode\n}\n\nexport interface SpeedMessage extends XToysCommand {\n  mode: 'speed',\n  /** how fast to move the toy (integer in the range 0-100) */\n   speed: number,\n  /** the upper stroke length that has been set (integer in the range 20-100) */\n   upper: number,\n  /** the lower stroke length that has been set (integer in the range 0-80) */\n   lower: number,\n}\n\nexport interface PositionMessage extends XToysCommand {\n  mode: 'position',\n  /** the number of milliseconds the toy should take to move to the given position */\n  duration: number,\n  /** the position the toy should move to (integer in the range 0-100) */\n  position: number\n}\n\n\nexport class XToysClient {\n  private ws?: WebSocket;\n  private listener?: EventListener;\n  public constructor(private readonly config: XToysConfig, private readonly onCommand?: Dispatch<XToysCommandUnion>) {}\n\n  public sendXToys(evt: any): void {\n    console.info(\"sending\", evt)\n    this.ws?.send(JSON.stringify(evt)+\"\\n\");\n  }\n\n  public stop(): void {\n    if (this.listener) {\n      this.ws?.removeEventListener('message', this.listener);\n    }\n    this.ws?.close(1000, \"Going Away\")\n  }\n\n  public async start(): Promise<void> {\n    const t = this;\n    this.ws = new WebSocket(\n      `wss://webhook.xtoys.app/${this.config.websocket}?token=${this.config.token}`\n    );\n\n    this.ws.onopen = () => {\n\n    };\n\n    const connected = new Promise((resolve, reject) => {\n\n      t.ws?.addEventListener('error', (e:Event)=> {\n        reject(e);\n      }, {once: true})\n\n      t.ws?.addEventListener('message', (e:MessageEvent) => {\n        try {\n          const parsed = JSON.parse(e.data);\n\n          if ((parsed as any).success === true) {\n            resolve(undefined);\n          }\n        } catch (e) {\n          reject(e);\n        }\n\n      }, {once: true})\n    })\n\n    await connected;\n    console.info('YAY, connected to xtoys');\n\n    t.ws?.addEventListener('message', (m) => {\n      const parsed = JSON.parse(m.data) as XToysCommandUnion;\n      t.onCommand?.(parsed);\n    });\n\n  }\n}\n","import './App.css';\nimport {KnockRod, ShockRodSize,} from \"./knockRod\";\nimport {DSS1, DSSE, STAT} from \"./knockRodProtocol\";\nimport {FC, useEffect, useState} from \"react\";\nimport {KnockRodParams, KnockRodState} from \"./knockRodState\";\nimport {XToysClient, XToysCommandUnion, XToysConfig} from \"./XToysClient\";\nimport {useRef} from \"react/index\";\n\nexport interface Config {\n    readonly xtoys: XToysConfig\n    readonly serialDevice: UsbDeviceIdentifier | undefined\n}\n\ntype UsbDeviceIdentifier = Required<SerialPortInfo>\n\nfunction getSessionStorageOrDefault<T>(key: any, defaultValue: T): T {\n    const stored = localStorage.getItem(key);\n    if (!stored) {\n        return defaultValue;\n    }\n    return JSON.parse(stored) as T;\n}\n\ninterface Props {\n\n}\n\nconst App: FC<Props> = (_props: Props) => {\n\n    const [config, setConfig] = useState<Config>(getSessionStorageOrDefault('config', {\n        serialDevice: undefined,\n        xtoys: {token: '', websocket: ''}\n    }));\n    const [params, _setParams] = useState<KnockRodParams>(getSessionStorageOrDefault('params', {\n        speed: 0,\n        acceleration: 30\n    }));\n\n    const latestParams = useRef(params)\n    function setParams(p:KnockRodParams) {\n        latestParams.current = p;\n        _setParams(p);\n    }\n\n    const [rodConnecting, setRodConnecting] = useState<boolean>(false);\n\n    useEffect(() => {\n        localStorage.setItem('config', JSON.stringify(config));\n    }, [config]);\n\n\n    const [size, setSize] = useState(ShockRodSize.EightInch)\n    const [state, setState] = useState<KnockRodState | undefined>(undefined);\n    const rod = useRef<KnockRod | undefined>(undefined);\n\n    const [xToys, setXToys] = useState<XToysClient | undefined>(undefined);\n\n    async function go() {\n\n        const ports = await window.navigator.serial.getPorts();\n        /** close all ports */\n        for (const p of ports) {\n\n            await p.writable?.getWriter().abort();\n            await p.readable?.getReader().cancel('terminating');\n            //await p.close();\n\n            // forget if possible\n            if ((p as any).forget) {\n                await (p as any).forget();\n            }\n        }\n\n\n\n        const port = await window.navigator.serial.requestPort({filters: config.serialDevice ? [config.serialDevice] : []});\n        if (!port.getInfo().usbVendorId || !port.getInfo().usbProductId) {\n            throw new Error(\"Serial device has no vedor or productId\")\n        }\n\n        setConfig(c => ({...c, serialDevice: port.getInfo() as UsbDeviceIdentifier}))\n        let t = new KnockRod(port, size);\n        t.addEventListener('stateChange', (e) => setState(e.detail.state))\n\n        setRodConnecting(true);\n        console.info(\"connecting to rod...\")\n        try {\n            await t.init();\n            rod.current = t;\n        } finally {\n            console.info(\"connecting is over\")\n            setRodConnecting(false);\n        }\n\n        console.info(\"ready for fun\")\n    }\n\n    function renderAcceleration(speed: number) {\n        return new Intl.NumberFormat('en-US', {maximumFractionDigits: 4}).format(speed / 10.0) + \"cm/s^2\";\n    }\n\n    function renderSpeed(speed: number) {\n        return new Intl.NumberFormat('en-US', {maximumFractionDigits: 4}).format(speed / 10.0) + \"cm/s\";\n    }\n\n    function renderMmm(mm: number) {\n        return new Intl.NumberFormat('en-US', {maximumFractionDigits: 4}).format(mm / 10.0) + \"cm\";\n    }\n\n    function disconnectXToys() {\n        xToys?.stop();\n        setXToys(undefined);\n    }\n\n    async function connectXToys() {\n\n        const c = new XToysClient(config.xtoys, (c) => {\n            onCommand(c)\n        });\n        await c.start();\n        setXToys(c);\n    }\n\n    function onCommand(cmd: XToysCommandUnion) {\n        if (cmd.mode === 'position') {\n            rod.current?.moveToWithin(cmd.position/100, cmd.duration, latestParams.current.acceleration)\n            if (!!rod.current) console.info('move to ' + cmd.position)\n        } else if (cmd.mode === 'speed'){\n            console.info('oscillate with', cmd)\n            rod.current?.oscillate(cmd.speed / 100, cmd.lower/100, cmd.upper/100, latestParams.current.acceleration)\n\n        }\n        else {\n            console.info(cmd)\n        }\n\n    }\n\n\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n\n\n                <fieldset>\n                    <legend>XToys</legend>\n                    <p>\n                        You can have XToys control your device as Custom XToys Webhook Toy. Create a custom toy of type \"Stroker or Thrust Toy (Speed + Position)\"\n                        and add the Websocket credentials here.\n                    </p>\n                    <label>Websocket <input type='text' disabled={!!xToys} onChange={(i) => setConfig((c) => ({\n                        ...c,\n                        xtoys: {...c.xtoys, websocket: i.target.value}\n                    }))} value={config.xtoys.websocket}/></label>\n                    <br />\n                    <label>Token <input type='text' disabled={!!xToys}\n                                        onChange={(i) => setConfig((c) => ({\n                                            ...c,\n                                            xtoys: {...c.xtoys, token: i.target.value}\n                                        }))}\n                                        value={config.xtoys.token}/></label>\n                    <br/>\n                    <button onClick={() => connectXToys()} disabled={!!xToys}>connect</button>\n                    {!!xToys && <button onClick={() => disconnectXToys()}>disconnect</button>}\n                </fieldset>\n\n                {!rod &&\n                    <p>\n                        Hit <code>start</code> and select your selected actuator from the popup list.\n                    </p>\n                }\n\n\n                {rod && state &&\n                    <table>\n                        <tbody>\n\n                        <tr>\n                            <td>Operation mode status (DSSE.PMSS):</td>\n                            <td>{state.systemStatusRegister.has(STAT.RMDS) ? 'MANU️' : 'AUTO'}</td>\n                        </tr>\n                        <tr>\n                            <td>Modbus enabled (DSSE.PMSS):</td>\n                            <td>{state.expansionDeviceStatus.has(DSSE.PMSS) ? '✔️' : '❌'}</td>\n                        </tr>\n                        <tr>\n                            <td>Safety speed enabled status (DSS1.SFTY):</td>\n                            <td><input type=\"checkbox\" checked={state.deviceStatusRegister1.has(DSS1.SFTY)}\n                                       onChange={(e) => rod.current?.setSafetySpeed(e.target.checked)}/>{state.deviceStatusRegister1.has(DSS1.SFTY) ? '✔️' : '❌'}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Controller ready status:</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.PWR) ? '✔️' : '❌'}</td>\n                        </tr>\n                        <tr>\n                            <td>Emergency Stop: (DSS1.EMGS)</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.EMGS) ? '🟠' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Missed work part in push-motion operation:</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.PSFL) ? '🟠️' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Servo ON status (DSS1.SV):</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.SV) ? '🟢' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Minor failure status (DSS1.ALMH):</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.ALMH) ? '🟡' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Major failure alarm present (DSS1.ALMH):</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.ALMH) ? '🔴️' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Input Value:</td>\n                            <td>{state.input}</td>\n                        </tr>\n\n                        <tr>\n                            <td>Moving signal (DSSE.MOVE):</td>\n                            <td>{state.expansionDeviceStatus.has(DSSE.MOVE) ? '🟢️' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Push Motion in progress signal (DSSE.PUSH):</td>\n                            <td>{state.expansionDeviceStatus.has(DSSE.PUSH) ? '🟢️' : '⚪'}</td>\n                        </tr>\n                        <tr>\n                            <td>Positioning Ended:</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.PEND) ? '✔️' : '❌'}</td>\n                        </tr>\n                        <tr>\n                            <td>Homing Ended:</td>\n                            <td>{state.deviceStatusRegister1.has(DSS1.HEND) ? '✔️' : '❌'}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                }\n\n                {rod && state &&\n                    <table>\n                        <tbody>\n                        <tr>\n                            <td>Safety Speed: {renderSpeed(params.speed)}</td>\n                            <td><input type=\"range\" value={params.speed}\n                                       onChange={(e) => setParams({...params, speed: parseInt(e.target.value)})}\n                                       min=\"100\" step=\"100\"\n                                       max=\"40000\"/></td>\n                        </tr>\n                        <tr>\n                            <td>Acceleration: {renderAcceleration(params.acceleration)}</td>\n                            <td><input type=\"range\" value={params.acceleration}\n                                       onChange={(e) => setParams({...params, acceleration: parseInt(e.target.value)})}\n                                       min=\"5\" step=\"1\"\n                                       max=\"50\"/></td>\n                        </tr>\n                        <tr>\n                            <td>Current Position:</td>\n                            <td>{renderMmm(state.currentPosition)}<br/>\n                                <input type=\"range\" value={state.currentPosition} disabled={true} min=\"0\" max=\"20000\"/>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                }\n\n                <div>\n                    {!state && !rodConnecting &&\n\n                        <>\n                            <select onChange={(e) => setSize(Number.parseInt(e.target.value)) } value={size}>\n                                <option value={ShockRodSize.EightInch} >8 inch (20cm)</option>\n                                <option value={ShockRodSize.TwelveInch}>12 inch (30cm)</option>\n                            </select>\n                        <button onClick={go} className=\"App-link\"> Start</button>\n                        </>\n                    }\n\n                    {rodConnecting &&\n                        <strong>ROD IS CONNECTING. STAND BY.</strong>\n                    }\n\n                    {state && rod && <div>\n\n\n                        <button onClick={() => rod.current?.resetAlarm()} disabled={!state}> Reset Alarm</button>\n                        <button onClick={() => rod.current?.moveSimple()}> Move up</button>\n\n\n                        <button\n                            onClick={() => rod.current?.setServo(!(state?.deviceStatusRegister1.has(DSS1.SV) || false))}> Toggle\n                            servo\n                        </button>\n                        <button onClick={() => rod.current?.home()}>Home</button>\n\n                        <br/>\n\n\n                    </div>\n                    }\n\n                </div>\n\n                {!rod &&\n                    <p>\n                        Find the code on <a href=\"https://github.com/rezreal/knock-lot\">github.com/rezreal/knock-lot</a>.\n                    </p>\n                }\n\n\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport {createRoot} from \"react-dom/client\";\n\nconst container = document.getElementById('root')\nconst root = createRoot(container!);\n\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n\n);"],"sourceRoot":""}